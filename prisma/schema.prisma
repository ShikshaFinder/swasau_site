// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      UserRole @default(CLIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  verificationToken String?
  emailVerified     Boolean  @default(false)
  
  // Relations
  apiTokens ApiToken[]
  requests  Request[]
  client    Client?
  intern    Intern?
}

enum UserRole {
  CLIENT
  INTERN
  ADMIN
}

model Client {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  company   String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects Project[]
}

model Intern {
  id            Int      @id @default(autoincrement())
  userId        Int?     @unique
  name          String
  email         String   @unique
  phone         String?
  qualification String
  resumeLink    String
  portfolio     String?
  github        String?
  linkedin      String?
  skills        String // JSON string of skills array
  experience    String?
  project       String?
  whyJoin       String
  photoUrl      String?
  isSelected    Boolean  @default(false)
  selectedAt    DateTime?
  status        String   @default("pending") // pending, selected, rejected
  adminNotes    String?
  availability  Int?     // hours per week
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  user        User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignments Assignment[]
}

model Project {
  id          Int           @id @default(autoincrement())
  title       String
  description String
  category    ProjectCategory
  budget      Decimal?
  deadline    DateTime?
  status      ProjectStatus @default(PENDING)
  clientId    Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  client      Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  assignments Assignment[]
}

enum ProjectCategory {
  IOT
  AI
  WEBSITE
  SOFTWARE
  MOBILE_APP
  BLOCKCHAIN
  CYBERSECURITY
  DATA_ANALYTICS
  OTHER
}

enum ProjectStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

model Assignment {
  id        Int      @id @default(autoincrement())
  projectId Int
  internId  Int
  assignedAt DateTime @default(now())
  notes     String?
  
  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  intern  Intern  @relation(fields: [internId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, internId])
}

model ApiToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  name      String   @default("Browser Extension")
  userId    Int
  createdAt DateTime @default(now())
  lastUsed  DateTime?
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Request {
  id          Int      @id @default(autoincrement())
  userId      Int
  url         String
  method      String
  headers     Json
  body        String?
  timestamp   DateTime @default(now())
  status      String   @default("pending") // pending, processing, completed, failed
  
  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  analysis Analysis?
}
model Analysis {
  id          Int      @id @default(autoincrement())
  requestId   Int      @unique
  result      Json
  status      String   @default("pending") // pending, completed, failed
  createdAt   DateTime @default(now())
  completedAt DateTime?
  
  // Relations
  request Request @relation(fields: [requestId], references: [id], onDelete: Cascade)
}

model Waitlist {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
}
