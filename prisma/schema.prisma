// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      UserRole @default(CLIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  verificationToken String?
  emailVerified     Boolean  @default(false)
  
  // Relations
  apiTokens ApiToken[]
  requests  Request[]
  client    Client?
  freelancer Freelancer?
  sentMessages Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  notifications Notification[]
  reviews   Review[] @relation("ReviewerReviews")
}

enum UserRole {
  CLIENT
  FREELANCER
  ADMIN
}

model Client {
  id              Int      @id @default(autoincrement())
  userId          Int      @unique
  company         String?
  phone           String?
  industry        String?
  companySize     String?
  website         String?
  description     String?
  registrationNumber String?
  gstNumber       String?
  address         String?
  city            String?
  state           String?
  country         String?
  pincode         String?
  isVerified      Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects Project[]
  reviews  Review[]  @relation("ClientReviews")
  contracts Contract[]
}

model Freelancer {
  id                Int      @id @default(autoincrement())
  userId            Int      @unique
  phone             String?
  bio               String?
  title             String?  // Professional title
  hourlyRate        Decimal?
  availability      String?  // Available, Busy, Away
  timezone          String?
  languages         String[] // Array of languages
  experience        String?  // Years of experience
  education         String?
  certifications    String[] // Array of certifications
  portfolio         String?  // Portfolio website
  github            String?
  linkedin          String?
  twitter           String?
  website           String?
  photoUrl          String?
  resumeUrl         String?
  
  // Verification
  isEmailVerified   Boolean  @default(false)
  isPhoneVerified   Boolean  @default(false)
  isIdentityVerified Boolean @default(false)
  isBankVerified    Boolean  @default(false)
  
  // Bank Details (encrypted)
  bankAccountNumber String?
  bankName          String?
  ifscCode          String?
  upiId             String?
  
  // KYC Documents
  aadharNumber      String?
  panNumber         String?
  passportNumber    String?
  
  // Profile completion
  profileCompletion Int      @default(0) // Percentage
  
  // Status
  status            String   @default("active") // active, suspended, banned
  isAvailable       Boolean  @default(true)
  
  // Stats
  totalEarnings     Decimal  @default(0)
  totalProjects     Int      @default(0)
  completedProjects Int      @default(0)
  averageRating     Decimal  @default(0)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bids              Bid[]
  contracts         Contract[]
  reviews           Review[] @relation("FreelancerReviews")
  portfolios        Portfolio[]
  skills            FreelancerSkill[]
  projects          Project[]
}

model Project {
  id              Int           @id @default(autoincrement())
  title           String
  description     String
  category        ProjectCategory
  subcategory     String?       // Embedded, ASIC, R&D, etc.
  budget          Decimal?
  budgetType      String?       // fixed, hourly, negotiable
  deadline        DateTime?
  status          ProjectStatus @default(PENDING)
  clientId        Int
  freelancerId    Int?          // Selected freelancer
  isPublic        Boolean       @default(true)
  isUrgent        Boolean       @default(false)
  skillsRequired  String[]      // Array of required skills
  experienceLevel String?       // beginner, intermediate, expert
  timeline        String?       // project duration
  location        String?       // remote, on-site, hybrid
  attachments     String[]      // Array of file URLs
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  client          Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  freelancer      Freelancer?   @relation(fields: [freelancerId], references: [id])
  bids            Bid[]
  contracts       Contract[]
  reviews         Review[]
  messages        Message[]
}

enum ProjectCategory {
  EMBEDDED
  ASIC
  RND
  IOT
  AI
  WEBSITE
  SOFTWARE
  MOBILE_APP
  BLOCKCHAIN
  CYBERSECURITY
  DATA_ANALYTICS
  HARDWARE
  FIRMWARE
  OTHER
}

enum ProjectStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

// New models for freelancing platform

model Bid {
  id          Int      @id @default(autoincrement())
  projectId   Int
  freelancerId Int
  amount      Decimal
  timeline    String?  // Proposed timeline
  coverLetter String?  // Proposal description
  status      String   @default("pending") // pending, accepted, rejected, withdrawn
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  freelancer  Freelancer @relation(fields: [freelancerId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, freelancerId])
}

model Contract {
  id            Int      @id @default(autoincrement())
  projectId     Int
  freelancerId  Int
  clientId      Int
  amount        Decimal
  startDate     DateTime
  endDate       DateTime?
  status        String   @default("draft") // draft, active, completed, terminated
  terms         String?  // Contract terms
  milestones    Json?    // Milestone details
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  project       Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  freelancer    Freelancer @relation(fields: [freelancerId], references: [id], onDelete: Cascade)
  client        Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  payments      Payment[]
}

model Review {
  id            Int      @id @default(autoincrement())
  projectId     Int
  reviewerId    Int      // User who wrote the review
  freelancerId  Int?     // Freelancer being reviewed
  clientId      Int?     // Client being reviewed
  revieweeType  String   // "freelancer" or "client"
  rating        Int      // 1-5 stars
  comment       String?
  criteria      Json?    // Detailed criteria ratings
  createdAt     DateTime @default(now())
  
  // Relations
  project       Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  reviewer      User        @relation("ReviewerReviews", fields: [reviewerId], references: [id], onDelete: Cascade)
  freelancer    Freelancer? @relation("FreelancerReviews", fields: [freelancerId], references: [id], onDelete: Cascade)
  client        Client?     @relation("ClientReviews", fields: [clientId], references: [id], onDelete: Cascade)
}

model Portfolio {
  id           Int      @id @default(autoincrement())
  freelancerId Int
  title        String
  description  String?
  imageUrl     String?
  projectUrl   String?
  githubUrl    String?
  technologies String[] // Array of technologies used
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  freelancer   Freelancer @relation(fields: [freelancerId], references: [id], onDelete: Cascade)
}

model Skill {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  category    String?
  description String?
  createdAt   DateTime @default(now())
  
  // Relations
  freelancers FreelancerSkill[]
}

model FreelancerSkill {
  id           Int      @id @default(autoincrement())
  freelancerId Int
  skillId      Int
  level        String   @default("intermediate") // beginner, intermediate, expert
  yearsOfExp   Int?
  createdAt    DateTime @default(now())
  
  // Relations
  freelancer   Freelancer @relation(fields: [freelancerId], references: [id], onDelete: Cascade)
  skill        Skill      @relation(fields: [skillId], references: [id], onDelete: Cascade)
  
  @@unique([freelancerId, skillId])
}

model Payment {
  id            Int      @id @default(autoincrement())
  contractId    Int
  amount        Decimal
  status        String   @default("pending") // pending, completed, failed, refunded
  paymentMethod String?  // razorpay, stripe, etc.
  transactionId String?
  gatewayResponse Json?  // Payment gateway response
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  contract      Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
}

model Message {
  id          Int      @id @default(autoincrement())
  senderId    Int
  receiverId  Int
  projectId   Int?
  content     String
  messageType String   @default("text") // text, file, image
  fileUrl     String?
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  // Relations
  sender      User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  project     Project? @relation(fields: [projectId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  message   String
  type      String   // bid, message, payment, review, etc.
  isRead    Boolean  @default(false)
  data      Json?    // Additional data
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ApiToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  name      String   @default("Browser Extension")
  userId    Int
  createdAt DateTime @default(now())
  lastUsed  DateTime?
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Request {
  id          Int      @id @default(autoincrement())
  userId      Int
  url         String
  method      String
  headers     Json
  body        String?
  timestamp   DateTime @default(now())
  status      String   @default("pending") // pending, processing, completed, failed
  
  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  analysis Analysis?
}
model Analysis {
  id          Int      @id @default(autoincrement())
  requestId   Int      @unique
  result      Json
  status      String   @default("pending") // pending, completed, failed
  createdAt   DateTime @default(now())
  completedAt DateTime?
  
  // Relations
  request Request @relation(fields: [requestId], references: [id], onDelete: Cascade)
}

model Waitlist {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
}
